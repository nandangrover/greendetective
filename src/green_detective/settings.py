"""
Django settings for green_detective project.

Generated by 'django-admin startproject' using Django 4.2

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import sys
import boto3
from dotenv import load_dotenv
from .utils import to_bool
from datetime import timedelta
from urllib.parse import urlparse
from celery.schedules import crontab
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
import redis

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

SECRET_KEY = os.getenv("SECRET_KEY")

ALLOWED_HOSTS = ["*"]
# Default Environment
APP_URL = os.getenv("APP_URL")
SERVER_ENVIRONMENT = os.getenv("SERVER_ENVIRONMENT", "unknown")
IS_LOCAL = True if SERVER_ENVIRONMENT == "local" else False
DEBUG = to_bool(os.getenv("DJANGO_DEBUG", False))
DEBUG_LOG = to_bool(os.getenv("DJANGO_DEBUG_LOG", False))

REPORT_FILES_LOCATION = "reports"
REPORT_FILES_STORAGE = "custom_storages.ReportStorage"
REPORTS_BUCKET = os.environ.get("REPORTS_BUCKET")
AWS_S3_EXPIRES_IN_REPORT_URL = 60 * 60 * 24 * 7

# -------------------------- AWS S3 Bucket Configurations --------------------------
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.environ.get("AWS_DEFAULT_REGION")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")

AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_VERIFY = True
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME

# For S3Boto3Storage
AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL", None)

# -------------------------- CORS Configurations --------------------------
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "accesstoken",
    "sentry-trace",
]

CSRF_TRUSTED_ORIGINS = [APP_URL]

# Celery Configuration Options
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SOFT_TIME_LIMIT = int(os.getenv("CELERY_TASK_SOFT_TIME_LIMIT", 10800))
CELERY_TASK_TIME_LIMIT = int(os.getenv("CELERY_TASK_TIME_LIMIT", 14400))
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SOFT_TIME_LIMIT = int(os.getenv("CELERY_TASK_SOFT_TIME_LIMIT", 1740))
CELERY_TASK_TIME_LIMIT = int(os.getenv("CELERY_TASK_TIME_LIMIT", 1800))
CELERY_WORKER_PREFETCH_MULTIPLIER = os.environ.get("CELERY_WORKER_PREFETCH_MULTIPLIER", 1)
CELERY_TASK_CREATE_MISSING_QUEUES = True
CELERY_TASK_INHERIT_PARENT_PRIORITY = True
CELERY_BROKER_URL = os.getenv("CELERY_BROKER", os.getenv("REDIS_HOST"))

# Queues
CELERY_QUEUE_GENERAL = "gd_general"
CELERY_QUEUE_SCRAPE = "gd_scrape"
CELERY_QUEUE_PRE_STAGING = "gd_pre_staging"
CELERY_QUEUE_POST_STAGING = "gd_post_staging"

# Add these rate limits under the queue definitions
CELERY_RATE_LIMIT_GENERAL = os.getenv("CELERY_RATE_LIMIT_GENERAL", "10/s")
CELERY_RATE_LIMIT_SCRAPE = os.getenv("CELERY_RATE_LIMIT_SCRAPE", "60/s")
CELERY_RATE_LIMIT_PRE_STAGING = os.getenv("CELERY_RATE_LIMIT_PRE_STAGING", "40/s")
CELERY_RATE_LIMIT_POST_STAGING = os.getenv("CELERY_RATE_LIMIT_POST_STAGING", "40/s")

# Enable task events for monitoring
CELERY_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Flower settings
CELERY_FLOWER_USER = os.getenv("CELERY_FLOWER_USER", "admin")
CELERY_FLOWER_PASSWORD = os.getenv("CELERY_FLOWER_PASSWORD", "admin")

# TODO: Change schedule to run at 12am and 1pm everyday
CELERY_BEAT_SCHEDULE = {}

LOG_ROOT = os.path.join(BASE_DIR, "logs")
boto3_logs_client = None

# Figure out a way to make Translate work in docker
if IS_LOCAL is False:
    try:
        boto3_logs_client = boto3.client(
            "logs",
            aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
            aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
            region_name=os.getenv("AWS_DEFAULT_REGION", "eu-west-2"),
        )
    except Exception as e:
        print(f"Failed to initialize CloudWatch client: {e}")
        boto3_logs_client = None

LOGGERS_COMMON = {
    "": {
        "handlers": (["console", "file", "debug_file"] if IS_LOCAL is True else ["watchtower"]),
        "level": "DEBUG" if DEBUG_LOG is True else "INFO",
    },
    "django": {
        "handlers": ["file"] if IS_LOCAL is True else ["watchtower"],
        "level": "INFO",
        "propagate": False,
    },
    "celery": {
        "handlers": ["celery", "console"] if IS_LOCAL is True else ["watchtower"],
        "level": "DEBUG",
    },
}
LOGGERS_BACKEND = {
    "django.db.backends": {
        "handlers": ["debug_file"],
        "level": "DEBUG",
        "propagate": False,
    },
}
if to_bool(os.getenv("DJANGO_LOG_BACKEND", False)):
    LOGGERS_COMMON = {**LOGGERS_COMMON, **LOGGERS_BACKEND}

# Add Sentry for error tracking
if os.getenv("SENTRY_DSN"):
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN"),
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
    )

# Enhanced logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "common": {
            "format": "[{name}] [{levelname}] {asctime}: {message}",
            "style": "{",
        }
    },
    "handlers": {
        "sentry": {
            "level": "ERROR",
            "class": "sentry_sdk.integrations.logging.EventHandler",
        },
        "watchtower": (
            {
                "level": "INFO",
                "class": "watchtower.CloudWatchLogHandler",
                "boto3_client": boto3_logs_client,
                "log_group": f"{os.getenv('AWS_LOG_GROUP', 'green-detective')}-{SERVER_ENVIRONMENT.capitalize()}",
                "stream_name": "{machine_name}/{logger_name}",
                "formatter": "common",
            }
            if boto3_logs_client is not None
            else {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "common",
            }
        ),
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "common",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 180,
            "formatter": "common",
            "filename": "{}/django-server.log".format(LOG_ROOT),
        },
        "debug_file": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 180,
            "formatter": "common",
            "filename": "{}/debug.log".format(LOG_ROOT),
        },
        "cron_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 180,
            "formatter": "common",
            "filename": "{}/cron.log".format(LOG_ROOT),
        },
        "celery": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 180,
            "formatter": "common",
            "filename": "{}/celery.log".format(LOG_ROOT),
        },
    },
    "loggers": {
        "": {
            "handlers": ["sentry"],
            "level": "ERROR",
            "propagate": True,
        },
    },
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django_crontab",
    "django_celery_beat",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_celery_results",
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
    "corsheaders",
    "green_detective",
    "detective",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "green_detective.middleware.HealthCheckMiddleware",
]

SWAGGER_SETTINGS = {
    "DEFAULT_FIELD_INSPECTORS": [
        "drf_yasg.inspectors.CamelCaseJSONFilter",
        "drf_yasg.inspectors.InlineSerializerInspector",
        "drf_yasg.inspectors.RelatedFieldInspector",
        "drf_yasg.inspectors.ChoiceFieldInspector",
        "drf_yasg.inspectors.FileFieldInspector",
        "drf_yasg.inspectors.DictFieldInspector",
        "drf_yasg.inspectors.SimpleFieldInspector",
        "drf_yasg.inspectors.StringDefaultFieldInspector",
    ],
}

ROOT_URLCONF = "green_detective.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "green_detective.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DBNAME"),
        "HOST": os.getenv("DBHOST"),
        "USER": os.getenv("DBUSER"),
        "PASSWORD": os.getenv("DBPASS"),
        "PORT": os.getenv("DBPORT"),
        "TEST": {
            "NAME": os.getenv("TEST_DBNAME", "{}_test".format(os.getenv("DBNAME"))),
        },
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_HOST"),
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "green_detective",
    }
}

UNIT_TESTING = sys.argv[1:2] == ["test"]

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Media files
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"
# if DEBUG:logs
MEDIA_FILES_LOCATION = "media"

# Django debug tools
if DEBUG:
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -------------------------- Rest Framework Settings --------------------------
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/hour", "user": "1000/hour"},
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME": timedelta(days=30),
    "SLIDING_TOKEN_REFRESH_LIFETIME_LATE_USER": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME_LATE_USER": timedelta(days=30),
}

# Email settings
if SERVER_ENVIRONMENT == "local":
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "green-detective-mailhog"
    EMAIL_PORT = 1025
    EMAIL_USE_TLS = False
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@detective.ai")
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

# # Add/update these security settings
# SECURE_HSTS_SECONDS = 31536000  # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

REDIS_CONN = redis.Redis(
    host=os.getenv("REDIS_HOST", "redis"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    db=int(os.getenv("REDIS_DB", 0)),
    decode_responses=True,
)
