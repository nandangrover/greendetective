name: Deploy to AWS

on:
  push:
    branches:
      - main
      - sandbox
      - test

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY_API: green-detective-api
  ECR_REPOSITORY_PROCESS: green-detective-process
  ECS_CLUSTER: green-detective
  ECS_SERVICE_API: green-detective-api
  ECS_SERVICE_PROCESS: green-detective-process

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Check if ECR repositories exist
        id: check-ecr
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_API }} > /dev/null 2>&1; then
            echo "ECR repository ${{ env.ECR_REPOSITORY_API }} does not exist. Run the initial-setup workflow first."
            exit 1
          fi
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_PROCESS }} > /dev/null 2>&1; then
            echo "ECR repository ${{ env.ECR_REPOSITORY_PROCESS }} does not exist. Run the initial-setup workflow first."
            exit 1
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Delete existing API images
        run: |
          IMAGES=$(aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY_API }} --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY_API }} --image-ids "$IMAGES"
          fi

      - name: Delete existing Process images
        run: |
          IMAGES=$(aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY_PROCESS }} --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ]; then
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY_PROCESS }} --image-ids "$IMAGES"
          fi

      - name: Build and tag API image
        run: |
          docker build --target service-api -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ github.sha }} .
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:latest

      - name: Build and tag Process image
        run: |
          docker build --target service-process -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PROCESS }}:${{ github.sha }} .
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PROCESS }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PROCESS }}:latest

      - name: Push API image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:latest

      - name: Push Process image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PROCESS }}:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PROCESS }}:latest

      - name: Force new ECS deployment for API service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_API }} \
            --force-new-deployment

      - name: Force new ECS deployment for Process service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_PROCESS }} \
            --force-new-deployment
